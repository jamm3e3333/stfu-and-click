/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/sessions": {
    post: operations["createSession"];
  };
  "/api/v1/users": {
    post: operations["createUser"];
  };
  "/api/v1/addTeamClick/{teamId}": {
    post: operations["addTeamClick"];
  };
  "/api/v1/teams": {
    get: operations["getTeams"];
  };
  "/api/v1/teams/{teamId}": {
    get: operations["getTeamByTeamId"];
  };
}

export interface components {
  schemas: {
    User: {
      /** @example 2309234802 */
      id: string;
      /** @example john@doe.com */
      email: string;
    };
    Team: {
      /** @example Team */
      name: string;
      /** @example 23409823 */
      id: string;
    };
    ClickCount: {
      /** @example 1000 */
      clickCount: number;
    };
    HttpError: {
      message?: string;
      status?: number;
      errorCode?: string;
      errorData?: {
        message?: string;
        code?: string;
      };
      errorClass?: string;
      stack?: string;
    };
  };
  responses: {
    /** Unauthorized access */
    UnauthorizedErrorResponse: {
      content: {
        "application/json": components["schemas"]["HttpError"];
      };
    };
    /** Validation isn't passing - unprocessable_entity */
    UnprocessableEntityErrorResponse: {
      content: {
        "application/json": components["schemas"]["HttpError"];
      };
    };
    /** Request not processed - bad_request */
    BadRequestErrorResponse: {
      content: {
        "application/json": components["schemas"]["HttpError"];
      };
    };
    /** Entity not found - not_found */
    NotFoundErrorResponse: {
      content: {
        "application/json": components["schemas"]["HttpError"];
      };
    };
    /** Permission denied - forbidden */
    ForbiddenErrorResponse: {
      content: {
        "application/json": components["schemas"]["HttpError"];
      };
    };
    /** Method not allowed */
    MethodNotAllowedResponse: {
      content: {
        "application/json": components["schemas"]["HttpError"];
      };
    };
    /** Too many requests */
    TooManyRequestsResponse: {
      content: {
        "application/json": components["schemas"]["HttpError"];
      };
    };
    /** Bad gateway */
    BadGatewayErrorResponse: {
      content: {
        "application/json": components["schemas"]["HttpError"];
      };
    };
  };
  parameters: {
    Id: string;
  };
  requestBodies: {
    RefreshTokenRequestBody: {
      content: {
        "application/json": {
          refreshToken: string;
        };
      };
    };
  };
}

export interface operations {
  createSession: {
    responses: {
      /** ok */
      200: {
        content: {
          "application/json": {
            /** @example MjE5NjE5ZGQtOTY5Yi00NWRiLWFkYjgtMGJmMGU4MGM4MDUw */
            token: string;
          };
        };
      };
      400: components["responses"]["BadRequestErrorResponse"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** @example john@doe.com */
          email: string;
        };
      };
    };
  };
  createUser: {
    responses: {
      /** ok */
      200: {
        content: {
          "application/json": {
            /** @example caeb2a6a-bd1d-41cc-bfdf-5d4514ace591 */
            token: string;
          };
        };
      };
      400: components["responses"]["BadRequestErrorResponse"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** @example john@doe.com */
          email: string;
          /** @example Abinader */
          teamName: string;
        };
      };
    };
  };
  addTeamClick: {
    parameters: {
      path: {
        /** Unique team ID. See `/teams` */
        teamId: string;
      };
    };
    responses: {
      /** ok */
      200: unknown;
      400: components["responses"]["BadRequestErrorResponse"];
    };
  };
  getTeams: {
    responses: {
      /** ok */
      200: {
        content: {
          "application/json": (components["schemas"]["Team"] &
            components["schemas"]["ClickCount"] & {
              users: (components["schemas"]["User"] &
                components["schemas"]["ClickCount"])[];
            })[];
        };
      };
      400: components["responses"]["BadRequestErrorResponse"];
    };
  };
  getTeamByTeamId: {
    responses: {
      /** ok */
      200: {
        content: {
          "application/json": components["schemas"]["Team"] &
            components["schemas"]["ClickCount"] & {
              users: (components["schemas"]["User"] &
                components["schemas"]["ClickCount"])[];
            };
        };
      };
      400: components["responses"]["BadRequestErrorResponse"];
    };
  };
}

export interface external {}
