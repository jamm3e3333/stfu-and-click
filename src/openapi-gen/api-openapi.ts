/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1/sessions": {
    /** Authenticate user */
    post: operations["createSession"];
  };
  "/api/v1/users": {
    /** Create a new user */
    post: operations["createUser"];
  };
  "/api/v1/addTeamClick/{teamId}": {
    /** Add click to the team */
    post: operations["addTeamClick"];
  };
  "/api/v1/teams": {
    /** Get teams */
    get: operations["getTeams"];
  };
  "/api/v1/teams/{teamId}": {
    /** Get team by teamId */
    get: operations["getTeamByTeamId"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    User: {
      /** @example 2309234802 */
      id: string;
      /** @example john@doe.com */
      email: string;
    };
    Team: {
      /** @example Team */
      name: string;
      /** @example 23409823 */
      id: string;
    };
    ClickCount: {
      /** @example 1000 */
      clickCount: number;
    };
    HttpError: {
      message?: string;
      status?: number;
      errorCode?: string;
      errorData?: {
        message?: string;
        code?: string;
      };
      errorClass?: string;
      stack?: string;
    };
  };
  responses: {
    /** @description Unauthorized access */
    UnauthorizedErrorResponse: {
      content: {
        "application/json": components["schemas"]["HttpError"];
      };
    };
    /** @description Validation isn't passing - unprocessable_entity */
    UnprocessableEntityErrorResponse: {
      content: {
        "application/json": components["schemas"]["HttpError"];
      };
    };
    /** @description Request not processed - bad_request */
    BadRequestErrorResponse: {
      content: {
        "application/json": components["schemas"]["HttpError"];
      };
    };
    /** @description Entity not found - not_found */
    NotFoundErrorResponse: {
      content: {
        "application/json": components["schemas"]["HttpError"];
      };
    };
    /** @description Permission denied - forbidden */
    ForbiddenErrorResponse: {
      content: {
        "application/json": components["schemas"]["HttpError"];
      };
    };
    /** @description Method not allowed */
    MethodNotAllowedResponse: {
      content: {
        "application/json": components["schemas"]["HttpError"];
      };
    };
    /** @description Too many requests */
    TooManyRequestsResponse: {
      content: {
        "application/json": components["schemas"]["HttpError"];
      };
    };
    /** @description Bad gateway */
    BadGatewayErrorResponse: {
      content: {
        "application/json": components["schemas"]["HttpError"];
      };
    };
  };
  parameters: {
    Id: string;
  };
  requestBodies: {
    RefreshTokenRequestBody?: {
      content: {
        "application/json": {
          refreshToken: string;
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  createSession: {
    /** Authenticate user */
    requestBody?: {
      content: {
        "application/json": {
          /** @example john@doe.com */
          email: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": {
            /** @example MjE5NjE5ZGQtOTY5Yi00NWRiLWFkYjgtMGJmMGU4MGM4MDUw */
            token: string;
          };
        };
      };
      400: components["responses"]["BadRequestErrorResponse"];
    };
  };
  createUser: {
    /** Create a new user */
    requestBody?: {
      content: {
        "application/json": {
          /** @example john@doe.com */
          email: string;
        };
      };
    };
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": {
            /** @example caeb2a6a-bd1d-41cc-bfdf-5d4514ace591 */
            token: string;
          };
        };
      };
      400: components["responses"]["BadRequestErrorResponse"];
    };
  };
  addTeamClick: {
    /** Add click to the team */
    parameters: {
        /** @description Unique team ID. See `/teams` */
      path: {
        teamId: string;
      };
    };
    responses: {
      /** @description ok */
      200: never;
      400: components["responses"]["BadRequestErrorResponse"];
    };
  };
  getTeams: {
    /** Get teams */
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": (components["schemas"]["Team"] & components["schemas"]["ClickCount"] & ({
              users: (components["schemas"]["User"] & components["schemas"]["ClickCount"])[];
            }))[];
        };
      };
      400: components["responses"]["BadRequestErrorResponse"];
    };
  };
  getTeamByTeamId: {
    /** Get team by teamId */
    responses: {
      /** @description ok */
      200: {
        content: {
          "application/json": components["schemas"]["Team"] & components["schemas"]["ClickCount"] & ({
            users: (components["schemas"]["User"] & components["schemas"]["ClickCount"])[];
          });
        };
      };
      400: components["responses"]["BadRequestErrorResponse"];
    };
  };
}
